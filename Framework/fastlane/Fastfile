# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

default_platform(:ios)

fastlane_require 'nokogiri'

TestResult = Struct.new(:total, :failed)

platform :ios do

  # -----------------------
  # before all lanes
  # -----------------------
  before_all do |lane|
    sh("if [ -d ../reports ]; then rm -Rf ../reports; fi")
    sh("if [ -f *.xml ]; then rm -f *.xml; fi")
    sh("bundle exec pod install --repo-update")
  end

  # -----------------------
  # lanes
  # -----------------------
  lane :tests do
    scan(
      xcargs: "ONLY_ACTIVE_ARCH=YES",
      scheme: "PickImageAlert",
      code_coverage: true,
      output_directory: "reports",
      fail_build: false,
      suppress_xcode_output: false,
      device: "iPhone 8",
      configuration: "Debug",
      output_types: "junit"
    )
  end

  lane :build do
    tests
    run_lint()
    prepare_reports()
  end

  # -----------------------
  # functions
  # -----------------------
  def prepare_reports()
    failed_tests = Integer(get_number_of_tests().failed)
    total_tests = Integer(get_number_of_tests().total)
    if failed_tests > 0 && total_tests > 0
      error_message = "❌ Failed tests"
      on_error(error_message)
    elsif failed_tests == 0 && total_tests == 0
      error_message = "⚠️ No tests available"
      on_error(error_message)
    else
      on_success()
    end
  end

  def run_lint()
    swiftlint(
      output_file: "reports/swiftlint.txt", 
      ignore_exit_status: true
    )
  end

  def get_number_of_tests()
    path = '../reports/report.junit'
    doc = Nokogiri::XML(File.open(path))
    tests = doc.xpath("//testsuite")
    
    total = tests[0].attr('tests')
    totalValue = "#{ sprintf '%.0f', total.to_f }"
    
    failed = tests[0].attr('failures')
    failedValue = "#{ sprintf '%.0f', failed.to_f }"
    
    result = TestResult.new(total, failed)

    return result
  end

  def get_failed_tests()
    path = '../reports/report.junit'
    doc = Nokogiri::XML(File.open(path))

    node_tree = doc.css('testcase')
    failedTests = node_tree.map do |node|
      if node.first_element_child
        "• `#{ node.values[0].split('.')[1].to_s }` - _#{ node.values[1].to_s }_"
      end
    end.select {|str| !str.nil? && !str.empty? }
    
    return failedTests.join("\n")
  end

  def get_code_smells()
    swiftLintPath = '../reports/swiftlint.txt'
    codeSmells = File.foreach(swiftLintPath).inject(0) {|c, line| c+1}
    return codeSmells
  end

  def get_app_version()
    appVersion = get_version_number()
    return appVersion
  end

  def on_success()
  end

  def on_error(exception)
  end
end